<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="9" time="31.484" timestamp="2022-08-30T12:16:56.589143" hostname="HJ9FR44YX2"><testcase classname="test.test_walk.TestWalk" name="test_run_walk" time="0.010" /><testcase classname="test.test_walk.TestWalk" name="test_run_walk_exception" time="0.007" /><testcase classname="test.common.test_task_generator.TestTaskGenerator" name="test_walk_generator" time="0.001" /><testcase classname="test.common.test_task_generator.TestTaskGenerator" name="test_walk_generator_with_group" time="0.000" /><testcase classname="test.common.test_task_generator.TestTaskGenerator" name="test_walk_generator_with_profile" time="0.001" /><testcase classname="test.inventory.test_loader.TestLoader" name="test_walk_task" time="0.000" /><testcase classname="test.inventory.test_loader.TestLoader" name="test_walk_task_for_port_161" time="0.000" /><testcase classname="test.snmp.test_tasks.TestTasks" name="test_walk" time="30.403"><failure message="pymongo.errors.ServerSelectionTimeoutError: localhost:27017: [Errno 61] Connection refused, Timeout: 30s, Topology Description: &lt;TopologyDescription id: 0000000162879961a2d069f6, topology_type: Single, servers: [&lt;ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 61] Connection refused')&gt;]&gt;">thing = &lt;module 'splunk_connect_for_snmp.snmp' (namespace)&gt;, comp = 'tasks', import_path = 'splunk_connect_for_snmp.snmp.tasks'

    def _dot_lookup(thing, comp, import_path):
        try:
&gt;           return getattr(thing, comp)
E           AttributeError: module 'splunk_connect_for_snmp.snmp' has no attribute 'tasks'

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py:1215: AttributeError

During handling of the above exception, another exception occurred:
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py:1322: in patched
    with self.decoration_helper(patched,
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/contextlib.py:113: in __enter__
    return next(self.gen)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py:1304: in decoration_helper
    arg = exit_stack.enter_context(patching)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/contextlib.py:425: in enter_context
    result = _cm_type.__enter__(cm)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py:1377: in __enter__
    self.target = self.getter()
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py:1552: in &lt;lambda&gt;
    getter = lambda: _importer(target)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py:1228: in _importer
    thing = _dot_lookup(thing, comp, import_path)
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py:1217: in _dot_lookup
    __import__(import_path)
splunk_connect_for_snmp/snmp/tasks.py:65: in &lt;module&gt;
    def walk(self, **kwargs):
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/celery/app/__init__.py:63: in __inner
    app._task_from_fun(fun, **options)
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/celery/app/base.py:472: in _task_from_fun
    task = type(fun.__name__, (base,), dict({
splunk_connect_for_snmp/snmp/manager.py:227: in __init__
    self.session = CachedLimiterSession(
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/requests_cache/session.py:60: in __init__
    self.cache = init_backend(cache_name, backend, **kwargs)
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/requests_cache/backends/__init__.py:76: in init_backend
    logger.debug(f'Initializing backend: {backend} {cache_name}')
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/requests_cache/backends/base.py:235: in __str__
    return f'Total rows: {len(self.responses)} responses, {len(self.redirects)} redirects'
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/requests_cache/backends/mongodb.py:82: in __len__
    return self.collection.estimated_document_count()
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/pymongo/collection.py:1745: in estimated_document_count
    return self.__database.client._retryable_read(
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/pymongo/mongo_client.py:1514: in _retryable_read
    server = self._select_server(
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/pymongo/mongo_client.py:1346: in _select_server
    server = topology.select_server(server_selector)
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/pymongo/topology.py:244: in select_server
    return random.choice(self.select_servers(selector,
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/pymongo/topology.py:202: in select_servers
    server_descriptions = self._select_servers_loop(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Topology &lt;TopologyDescription id: 0000000162879961a2d069f6, topology_type: Single, servers: [&lt;ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 61] Connection refused')&gt;]&gt;&gt;
selector = Primary(), timeout = 30, address = None

    def _select_servers_loop(self, selector, timeout, address):
        """select_servers() guts. Hold the lock when calling this."""
        now = _time()
        end_time = now + timeout
        server_descriptions = self._description.apply_selector(
            selector, address, custom_selector=self._settings.server_selector)
    
        while not server_descriptions:
            # No suitable servers.
            if timeout == 0 or now &gt; end_time:
&gt;               raise ServerSelectionTimeoutError(
                    "%s, Timeout: %ss, Topology Description: %r" %
                    (self._error_message(selector), timeout, self.description))
E               pymongo.errors.ServerSelectionTimeoutError: localhost:27017: [Errno 61] Connection refused, Timeout: 30s, Topology Description: &lt;TopologyDescription id: 0000000162879961a2d069f6, topology_type: Single, servers: [&lt;ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 61] Connection refused')&gt;]&gt;

/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/pymongo/topology.py:218: ServerSelectionTimeoutError</failure></testcase><testcase classname="test.snmp.test_tasks.TestTasks" name="test_walk_with_group" time="0.003"><failure message="TypeError: __init__() should return None, not 'MagicMock'">self = &lt;test_tasks.TestTasks testMethod=test_walk_with_group&gt;, m_time = &lt;MagicMock name='time' id='4587464592'&gt;, m_do_work = &lt;MagicMock name='do_work' id='4588458624'&gt;
m_poller = &lt;MagicMock name='__init__' id='4586936688'&gt;, m_get_inventory = &lt;MagicMock name='get_inventory' id='4585040336'&gt;
m_release = &lt;MagicMock name='release' id='4584065776'&gt;, m_lock = &lt;MagicMock name='lock' id='4583542400'&gt;, m_mongo_lock = &lt;MagicMock name='__init__' id='4575016368'&gt;
m_mongo_client = &lt;MagicMock name='MongoClient' id='4575040656'&gt;

    @patch("splunk_connect_for_snmp.snmp.manager.get_inventory")
    @patch("splunk_connect_for_snmp.snmp.manager.Poller.__init__")
    @patch("splunk_connect_for_snmp.snmp.manager.Poller.do_work")
    @patch("time.time")
    def test_walk_with_group(
        self,
        m_time,
        m_do_work,
        m_poller,
        m_get_inventory,
        m_release,
        m_lock,
        m_mongo_lock,
        m_mongo_client,
    ):
&gt;       from splunk_connect_for_snmp.snmp.tasks import walk

test/snmp/test_tasks.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
splunk_connect_for_snmp/snmp/tasks.py:65: in &lt;module&gt;
    def walk(self, **kwargs):
/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/celery/app/__init__.py:63: in __inner
    app._task_from_fun(fun, **options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Celery sc4snmp_poller at 0x106f646a0&gt;, fun = &lt;function walk at 0x110e59f70&gt;, name = 'splunk_connect_for_snmp.snmp.tasks.walk'
base = &lt;class 'splunk_connect_for_snmp.snmp.manager.Poller'&gt;, bind = True
options = {'autoretry_for': (&lt;class 'mongolock.MongoLockLocked'&gt;, &lt;class 'splunk_connect_for_snmp.snmp.exceptions.SnmpActionError'&gt;), 'max_retries': 50, 'retry_backoff': 30, 'retry_backoff_max': 600, ...}
run = &lt;function walk at 0x110e59f70&gt;

    def _task_from_fun(self, fun, name=None, base=None, bind=False, **options):
        if not self.finalized and not self.autofinalize:
            raise RuntimeError('Contract breach: app not finalized')
        name = name or self.gen_task_name(fun.__name__, fun.__module__)
        base = base or self.Task
    
        if name not in self._tasks:
            run = fun if bind else staticmethod(fun)
&gt;           task = type(fun.__name__, (base,), dict({
                'app': self,
                'name': name,
                'run': run,
                '_decorated': True,
                '__doc__': fun.__doc__,
                '__module__': fun.__module__,
                '__annotations__': fun.__annotations__,
                '__header__': staticmethod(head_from_fun(fun, bound=bind)),
                '__wrapped__': run}, **options))()
E           TypeError: __init__() should return None, not 'MagicMock'

/Users/wzya/Library/Caches/pypoetry/virtualenvs/splunk-connect-for-snmp-rU-46K0b-py3.8/lib/python3.8/site-packages/celery/app/base.py:472: TypeError</failure></testcase></testsuite></testsuites>